generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  name            String
  email           String           @unique
  emailVerified   Boolean
  image           String?
  phone           String?
  address         String?
  status          String           @default("active")
  notes           String?
  isDeleted       Boolean          @default(false)
  orderCount      Int              @default(0)
  lastOrderReset  DateTime?
  createdAt       DateTime
  updatedAt       DateTime
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  isAnonymous     Boolean?
  role            String           @default("user")
  orders          Order[]
  payments        Payment[]
  reservations    Reservation[]
  stockMovements  StockMovement[]
  transactions    Transaction[]
  userPermissions UserPermission[]
  accounts        Account[]
  sessions        Session[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model RestaurantSettings {
  id                   String   @id @default(uuid())
  name                 String   @default("Mon Restaurant")
  deliveryEnabled      Boolean  @default(true)
  takeawayEnabled      Boolean  @default(true)
  dineInEnabled        Boolean  @default(true)
  facebookUrl          String?
  instagramUrl         String?
  twitterUrl           String?
  linkedinUrl          String?
  youtubeUrl           String?
  tiktokUrl            String?
  maxOrdersPerHour     Int      @default(10)
  maxOrdersPerUserHour Int      @default(3)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model OpeningHours {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek @unique
  openTime  String
  closeTime String
  isClosed  Boolean   @default(false)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ExceptionalClosure {
  id        String   @id @default(uuid())
  date      DateTime
  reason    String?
  allDay    Boolean  @default(true)
  startTime String?
  endTime   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryZone {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Float
  minOrder     Float?
  deliveryTime Int?
  isActive     Boolean  @default(true)
  polygon      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
}

model Table {
  id           String        @id @default(uuid())
  number       Int           @unique
  seats        Int
  location     String?
  status       TableStatus   @default(available)
  orders       Order[]
  reservations Reservation[]
}

model Reservation {
  id              String            @id @default(uuid())
  date            DateTime
  time            String?
  guests          Int?
  status          ReservationStatus @default(pending)
  notes           String?
  specialRequests String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  userId          String?
  tableId         String?
  customerName    String?
  email           String?
  phone           String?
  table           Table?            @relation(fields: [tableId], references: [id])
  user            User?             @relation(fields: [userId], references: [id])
}

model Order {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  status          OrderStatus     @default(pending)
  type            OrderType       @default(dine_in)
  userId          String
  tableId         String?
  deliveryZoneId  String?
  deliveryAddress String?
  deliveryFee     Float?
  total           Float?
  ipAddress       String?
  specialNotes    String?
  deliveryZone    DeliveryZone?   @relation(fields: [deliveryZoneId], references: [id])
  table           Table?          @relation(fields: [tableId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  payment         Payment?
  stockMovements  StockMovement[]
  transactions    Transaction[]
}

model OrderItem {
  id         String    @id @default(uuid())
  orderId    String
  menuItemId String?
  quantity   Int       @default(1)
  price      Float
  name       String
  image      String?
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model MenuCategory {
  id    String     @id @default(uuid())
  name  String
  items MenuItem[]
}

model MenuItem {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  image       String?
  available   Boolean      @default(true)
  categoryId  String
  category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  Recipe      Recipe[]
}

model Message {
  id           String   @id @default(uuid())
  customerName String
  email        String
  phone        String?
  subject      String?
  message      String
  type         String?
  priority     String?
  status       String   @default("new")
  source       String   @default("contact-form")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Report {
  id        String   @id @default(uuid())
  title     String
  content   String?
  type      String
  createdAt DateTime @default(now())
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  amount    Float
  method    PaymentMethod
  reference String?
  cashierId String
  status    PaymentStatus @default(completed)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  cashier   User          @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType
  amount      Float
  method      PaymentMethod
  description String?
  cashierId   String
  orderId     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  cashier     User            @relation(fields: [cashierId], references: [id], onDelete: Cascade)
  order       Order?          @relation(fields: [orderId], references: [id])
}

model Ingredient {
  id        String          @id @default(uuid())
  name      String
  unit      String
  price     Float
  stock     Float           @default(0)
  minStock  Float?
  supplier  String?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  category  String?
  packSize  Int?
  recipes   Recipe[]
  movements StockMovement[]
}

model Recipe {
  id           String     @id @default(uuid())
  menuItemId   String
  ingredientId String
  quantity     Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@unique([menuItemId, ingredientId])
}

model StockMovement {
  id           String            @id @default(uuid())
  ingredientId String
  type         StockMovementType
  quantity     Float
  description  String?
  userId       String?
  orderId      String?
  createdAt    DateTime          @default(now())
  ingredient   Ingredient        @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  order        Order?            @relation(fields: [orderId], references: [id])
  user         User?             @relation(fields: [userId], references: [id])
}

model RolePermission {
  id         String     @id @default(uuid())
  permission Permission
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  role       String

  @@unique([role, permission])
}

model UserPermission {
  id         String     @id @default(uuid())
  userId     String
  permission Permission
  granted    Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
}

enum TableStatus {
  available
  occupied
  reserved
}

enum ReservationStatus {
  pending
  confirmed
  cancelled
}

enum OrderStatus {
  pending
  preparing
  ready
  served
  cancelled
}

enum OrderType {
  dine_in
  takeaway
  delivery
}

enum PaymentMethod {
  cash
}

enum PaymentStatus {
  completed
  refunded
  cancelled
}

enum TransactionType {
  sale
  refund
  adjustment
}

enum Permission {
  VIEW_DASHBOARD
  VIEW_ANALYTICS
  VIEW_ORDERS
  CREATE_ORDERS
  UPDATE_ORDERS
  DELETE_ORDERS
  MANAGE_ORDER_STATUS
  VIEW_MENU
  CREATE_MENU_ITEMS
  UPDATE_MENU_ITEMS
  DELETE_MENU_ITEMS
  VIEW_TABLES
  MANAGE_TABLES
  VIEW_RESERVATIONS
  CREATE_RESERVATIONS
  UPDATE_RESERVATIONS
  DELETE_RESERVATIONS
  VIEW_CUSTOMERS
  MANAGE_CUSTOMERS
  VIEW_CASH_REGISTER
  MANAGE_PAYMENTS
  MANAGE_TRANSACTIONS
  VIEW_REPORTS
  VIEW_INVENTORY
  MANAGE_INVENTORY
  MANAGE_STOCK
  VIEW_STAFF
  MANAGE_STAFF
  MANAGE_PERMISSIONS
  VIEW_SETTINGS
  MANAGE_SETTINGS
  VIEW_MESSAGES
  MANAGE_MESSAGES
}

enum DayOfWeek {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum StockMovementType {
  IN
  OUT
  ADJUST
}
